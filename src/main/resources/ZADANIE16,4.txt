CREATE TABLE USERS
(
    ID   SERIAL PRIMARY KEY,
    FIRSTNAME   VARCHAR(100),
    LASTNAME VARCHAR(100)
    );

CREATE TABLE POSTS
(
    ID  SERIAL PRIMARY KEY,
    USER_ID  BIGINT UNSIGNED NOT NULL,
    BODY   VARCHAR(1024),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

SELECT * FROM USERS;

INSERT INTO USERS (FIRSTNAME, LASTNAME) VALUES ('John', 'Smith');

COMMIT;

INSERT INTO POSTS (USER_ID, BODY) VALUES (1, 'This is my first post on this forum!');

COMMIT;

SELECT * FROM POSTS;

INSERT INTO USERS (FIRSTNAME, LASTNAME) VALUES ('Zachary', 'Lee');

INSERT INTO USERS (FIRSTNAME, LASTNAME) VALUES ('Stephanie', 'Kovalsky');

INSERT INTO USERS (FIRSTNAME, LASTNAME) VALUES ('Thomas', 'Landgren');

INSERT INTO USERS (FIRSTNAME, LASTNAME) VALUES ('John', 'Thomson');

INSERT INTO POSTS (USER_ID, BODY) VALUES (2, 'This is my first post too!');

INSERT INTO POSTS (USER_ID, BODY) VALUES (2, 'How are you?');

INSERT INTO POSTS (USER_ID, BODY) VALUES (1, 'Quite good, thanks bro!');

INSERT INTO POSTS (USER_ID, BODY) VALUES (4, 'Yo all! Here is Thomas!');

COMMIT;

CREATE TABLE ISSUESLISTS
(
    ID   SERIAL PRIMARY KEY,
    NAME   VARCHAR(500)
    );

CREATE TABLE ISSUES
(
    ID  SERIAL PRIMARY KEY,
    ISSUESLIST_ID  BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (ISSUESLIST_ID) REFERENCES ISSUESLISTS(ID),
    SUMMARY VARCHAR(200),
    DESCRIPTION VARCHAR(500),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS(ID)
);

INSERT INTO ISSUESLISTS (NAME) VALUES ('ToDo');

INSERT INTO ISSUESLISTS (NAME) VALUES ('In progress');

INSERT INTO ISSUESLISTS (NAME) VALUES ('Done');

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (1,'Feed the cat','Give food',2);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (1,'Brush the cat','Use a brush',4);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (1,'Bath the cat','Use a shampoo and water',1);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (1,'Pet the cat','Give a stroke',3);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (1,'Feed the cat again','Give food',2);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (2,'Do archiving of documents','20 days to complete the task',5);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (2,'Post the invoices for December','Time until December 31, 2021',5);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (2,'Make an inventory','Time until December 31, 2021',5);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (2,'Buy a new printer','Office model, color printing',1);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (2,'Order holiday catering','2 main courses, starter and dessert, for 50 people',2);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (3,'Drink a coffee','Add coffee, hot water and  milk',1);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (3,'Eat breakfast','Sandwiches with ham',2);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (3,'Exercise','Do 30 push-ups',3);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (3,'Clean the living room','Wash windows, vacuum, mop the floor',4);

INSERT INTO ISSUES (ISSUESLIST_ID,SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (3,'Prepare a presentation','Make a slide show about healthy lifestyle',5);

COMMIT;

SELECT * FROM ISSUESLISTS;

SELECT * FROM ISSUES;

SELECT ID, FIRSTNAME FROM USERS
WHERE (ID >= 4 AND ID <= 10)
   OR ID = 1;

SELECT COUNT(*) FROM USERS;

SELECT MIN(ID), MAX(ID) FROM USERS;

SELECT SUM(ID), AVG(ID) FROM USERS;

SELECT SUM(ID) AS TOTAL, AVG(ID) AS AVERAGE FROM USERS;

SELECT U.FIRSTNAME, U.LASTNAME, P.BODY
FROM USERS U
JOIN POSTS P ON U.ID = P.USER_ID;

SELECT USER_ID, COUNT(*) AS POSTS_NUMBER
FROM POSTS
GROUP BY USER_ID;

SELECT USER_ID, COUNT(*) AS POSTS_NUMBER
FROM POSTS
GROUP BY USER_ID
HAVING COUNT(*) > 1;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS POSTS_NUMBER
FROM USERS U JOIN POSTS P ON U.ID = P.USER_ID
GROUP BY P.USER_ID
HAVING COUNT(*) > 1;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS POSTS_NUMBER
FROM USERS U JOIN POSTS P ON U.ID = P.USER_ID
GROUP BY P.USER_ID
HAVING COUNT(*) > 1
ORDER BY U.LASTNAME, U.FIRSTNAME;

SELECT I.SUMMARY, I.DESCRIPTION, IL.NAME
FROM ISSUES I
JOIN ISSUESLISTS IL ON I.ID >= IL.ID;

SELECT I.SUMMARY, I.DESCRIPTION, U.FIRSTNAME, U.LASTNAME
FROM ISSUES I
JOIN USERS U on I.USER_ID_ASSIGNEDTO = U.ID;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS TASKS_QUANTITY
FROM USERS U JOIN ISSUES I ON U.ID = I.USER_ID_ASSIGNEDTO
GROUP BY I.USER_ID_ASSIGNEDTO